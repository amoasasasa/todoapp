apiVersion: apps/v1
kind: Deployment
metadata:
  name: todoappdeployment
  namespace: todo-namespace
spec:
  selector:
    matchLabels:
      app: todoappdeployment
  template:
    metadata:
      labels:
        app: todoappdeployment
    spec:
      containers:
      - name: todoappdeployment
        image: practiceapp
        imagePullPolicy: Never
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: myapp-env-var
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /startup
            port: 5000
          failureThreshold: 5
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: mongo
  namespace: todo-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mvertes/alpine-mongo:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: dbstorage
          mountPath: "/data/db/"
      volumes:
      - name: dbstorage
        emptyDir: {}
---
# now we will create services
# for public access we will create node port service so users can access application
# cluster ip for application to connect the database
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  type: NodePort
  selector:
    app: todoappdeployment
  ports:
  - port: 5000
    targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017